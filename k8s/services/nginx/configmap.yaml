apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dify
data:
  nginx.conf.template: |
    worker_processes ${NGINX_WORKER_PROCESSES};
    
    events {
        worker_connections 1024;
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout ${NGINX_KEEPALIVE_TIMEOUT};
        types_hash_max_size 2048;
        
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        
        upstream api {
            server api:5001;
        }
        
        upstream web {
            server web:3000;
        }
        
        include /etc/nginx/conf.d/*.conf;
    }
  
  proxy.conf.template: |
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_redirect off;
    proxy_buffering off;
    proxy_read_timeout ${NGINX_PROXY_READ_TIMEOUT};
    proxy_send_timeout ${NGINX_PROXY_SEND_TIMEOUT};
  
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location /console/api {
            proxy_pass http://api;
            include /etc/nginx/proxy.conf;
        }
        
        location /api {
            proxy_pass http://api;
            include /etc/nginx/proxy.conf;
        }
        
        location /v1 {
            proxy_pass http://api;
            include /etc/nginx/proxy.conf;
        }
        
        location /files {
            proxy_pass http://api;
            include /etc/nginx/proxy.conf;
        }
        
        location / {
            proxy_pass http://web;
            include /etc/nginx/proxy.conf;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
  
  docker-entrypoint.sh: |
    #!/bin/bash
    set -e
    
    # Set default values
    export NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
    export NGINX_KEEPALIVE_TIMEOUT=${NGINX_KEEPALIVE_TIMEOUT:-65}
    export NGINX_CLIENT_MAX_BODY_SIZE=${NGINX_CLIENT_MAX_BODY_SIZE:-100M}
    export NGINX_PROXY_READ_TIMEOUT=${NGINX_PROXY_READ_TIMEOUT:-3600s}
    export NGINX_PROXY_SEND_TIMEOUT=${NGINX_PROXY_SEND_TIMEOUT:-3600s}
    
    # Replace environment variables in configuration templates
    envsubst '${NGINX_WORKER_PROCESSES} ${NGINX_KEEPALIVE_TIMEOUT} ${NGINX_CLIENT_MAX_BODY_SIZE}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
    envsubst '${NGINX_PROXY_READ_TIMEOUT} ${NGINX_PROXY_SEND_TIMEOUT}' < /etc/nginx/proxy.conf.template > /etc/nginx/proxy.conf
    
    # Test nginx configuration
    nginx -t
    
    # Start nginx in foreground
    exec nginx -g "daemon off;"